// api/index.js - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

export default async function handler(req, res) {
    const html = `
  <!DOCTYPE html>
  <html lang="ru">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>AmoCRM Chat API Proxy</title>
      <style>
          body {
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              max-width: 800px;
              margin: 0 auto;
              padding: 20px;
              background: #f5f5f5;
          }
          .container {
              background: white;
              padding: 30px;
              border-radius: 10px;
              box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          }
          h1 { color: #333; text-align: center; }
          .status { 
              background: #e8f5e8; 
              padding: 10px; 
              border-radius: 5px; 
              border-left: 4px solid #4caf50;
              margin: 20px 0;
          }
          .endpoint {
              background: #f8f9fa;
              padding: 15px;
              margin: 10px 0;
              border-radius: 5px;
              border-left: 3px solid #007bff;
          }
          .method {
              display: inline-block;
              padding: 2px 8px;
              border-radius: 3px;
              font-size: 12px;
              font-weight: bold;
              margin-right: 10px;
          }
          .post { background: #28a745; color: white; }
          .get { background: #17a2b8; color: white; }
          code {
              background: #f8f9fa;
              padding: 2px 4px;
              border-radius: 3px;
              font-family: 'Courier New', monospace;
          }
          .test-button {
              background: #007bff;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 5px;
              cursor: pointer;
              margin: 5px;
          }
          .test-button:hover {
              background: #0056b3;
          }
          #results {
              background: #f8f9fa;
              padding: 15px;
              border-radius: 5px;
              margin-top: 20px;
              white-space: pre-wrap;
              font-family: 'Courier New', monospace;
              font-size: 12px;
              max-height: 300px;
              overflow-y: auto;
          }
      </style>
  </head>
  <body>
      <div class="container">
          <h1>üöÄ AmoCRM Chat API Proxy</h1>
          
          <div class="status">
              ‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
          </div>
  
          <h2>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h2>
  
          <div class="endpoint">
              <span class="method get">GET</span>
              <code>/api/health</code>
              <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞</p>
              <button class="test-button" onclick="testHealth()">–¢–µ—Å—Ç</button>
          </div>
  
          <div class="endpoint">
              <span class="method post">POST</span>
              <code>/api/get-token</code>
              <p>–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AmoCRM Chat API</p>
          </div>
  
          <div class="endpoint">
              <span class="method post">POST</span>
              <code>/api/send-message</code>
              <p>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ AmoCRM</p>
          </div>
  
          <div class="endpoint">
              <span class="method post">POST</span>
              <code>/api/debug-token</code>
              <p>–û—Ç–ª–∞–¥–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤</p>
          </div>
  
          <div class="endpoint">
              <span class="method post">POST</span>
              <code>/api/create-chat</code>
              <p>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞</p>
          </div>
  
          <div class="endpoint">
              <span class="method post">POST</span>
              <code>/api/delivery-status</code>
              <p>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</p>
          </div>
  
          <div class="endpoint">
              <span class="method get">GET</span>
              <code>/api/get-history</code>
              <p>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞</p>
          </div>
  
          <h2>üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç:</h2>
          <button class="test-button" onclick="testGetToken()">–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω</button>
          <button class="test-button" onclick="testDebugToken()">–û—Ç–ª–∞–¥–∏—Ç—å —Ç–æ–∫–µ–Ω</button>
  
          <div id="results"></div>
  
          <h2>üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</h2>
          <p>–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ README.md –ø—Ä–æ–µ–∫—Ç–∞.</p>
          <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å AmoCRM Chat API –∏–∑ n8n –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.</p>
      </div>
  
      <script>
          let currentToken = null;
  
          function log(message) {
              const results = document.getElementById('results');
              results.textContent += new Date().toLocaleTimeString() + ': ' + message + '\\n';
              results.scrollTop = results.scrollHeight;
          }
  
          async function testHealth() {
              try {
                  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...');
                  const response = await fetch('/api/health');
                  const data = await response.json();
                  log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ' + JSON.stringify(data, null, 2));
              } catch (error) {
                  log('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
              }
          }
  
          async function testGetToken() {
              try {
                  log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
                  const response = await fetch('/api/get-token', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                          channel_id: 'test-channel',
                          secret_key: 'test-secret',
                          account_id: 'test-account'
                      })
                  });
                  const data = await response.json();
                  if (data.token) {
                      currentToken = data.token;
                      log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ' + data.token.substr(0, 16) + '...');
                  } else {
                      log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ' + JSON.stringify(data, null, 2));
                  }
              } catch (error) {
                  log('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
              }
          }
  
          async function testDebugToken() {
              if (!currentToken) {
                  log('‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω');
                  return;
              }
              
              try {
                  log('–û—Ç–ª–∞–¥–∫–∞ —Ç–æ–∫–µ–Ω–∞...');
                  const response = await fetch('/api/debug-token', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ token: currentToken })
                  });
                  const data = await response.json();
                  log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ª–∞–¥–∫–∏: ' + JSON.stringify(data, null, 2));
              } catch (error) {
                  log('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
              }
          }
      </script>
  </body>
  </html>
    `;
  
    res.setHeader('Content-Type', 'text/html');
    res.status(200).send(html);
  }